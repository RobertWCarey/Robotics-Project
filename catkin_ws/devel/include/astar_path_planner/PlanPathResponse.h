// Generated by gencpp from file astar_path_planner/PlanPathResponse.msg
// DO NOT EDIT!


#ifndef ASTAR_PATH_PLANNER_MESSAGE_PLANPATHRESPONSE_H
#define ASTAR_PATH_PLANNER_MESSAGE_PLANPATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace astar_path_planner
{
template <class ContainerAllocator>
struct PlanPathResponse_
{
  typedef PlanPathResponse_<ContainerAllocator> Type;

  PlanPathResponse_()
    : length_of_path(0)
    , number_of_nodes_in_closed_set(0)  {
    }
  PlanPathResponse_(const ContainerAllocator& _alloc)
    : length_of_path(0)
    , number_of_nodes_in_closed_set(0)  {
  (void)_alloc;
    }



   typedef int32_t _length_of_path_type;
  _length_of_path_type length_of_path;

   typedef int32_t _number_of_nodes_in_closed_set_type;
  _number_of_nodes_in_closed_set_type number_of_nodes_in_closed_set;





  typedef boost::shared_ptr< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PlanPathResponse_

typedef ::astar_path_planner::PlanPathResponse_<std::allocator<void> > PlanPathResponse;

typedef boost::shared_ptr< ::astar_path_planner::PlanPathResponse > PlanPathResponsePtr;
typedef boost::shared_ptr< ::astar_path_planner::PlanPathResponse const> PlanPathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::astar_path_planner::PlanPathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace astar_path_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63b9c3f614e9dd9877a69c4e1441def7";
  }

  static const char* value(const ::astar_path_planner::PlanPathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63b9c3f614e9dd98ULL;
  static const uint64_t static_value2 = 0x77a69c4e1441def7ULL;
};

template<class ContainerAllocator>
struct DataType< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "astar_path_planner/PlanPathResponse";
  }

  static const char* value(const ::astar_path_planner::PlanPathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 length_of_path\n"
"int32 number_of_nodes_in_closed_set\n"
"\n"
;
  }

  static const char* value(const ::astar_path_planner::PlanPathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.length_of_path);
      stream.next(m.number_of_nodes_in_closed_set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanPathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::astar_path_planner::PlanPathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::astar_path_planner::PlanPathResponse_<ContainerAllocator>& v)
  {
    s << indent << "length_of_path: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length_of_path);
    s << indent << "number_of_nodes_in_closed_set: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_nodes_in_closed_set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASTAR_PATH_PLANNER_MESSAGE_PLANPATHRESPONSE_H
